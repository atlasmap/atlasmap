#
# Copyright (C) 2016 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: 2

common_env: &common_env
  MAVEN_OPTS: -Xmx512m
  DOCKER_VERSION: 17.12.1-ce

job_default: &job_defaults
  working_directory: /workspace
  docker:
    - image: openjdk:8-jdk
  
load_cache_mvn: &load_cache_mvn
  restore_cache:
    key: atlasmap-mvn-{{ checksum "pom.xml" }}

load_cache_node: &load_cache_node
  restore_cache:
    key: atlasmap-node-{{ checksum "ui/package.json" }}

save_cache_mvn: &save_cache_mvn
  save_cache:
    key: atlasmap-mvn-{{ checksum "pom.xml" }}
    paths:
    - ~/.m2

save_cache_node: &save_cache_node
  save_cache:
    key: atlasmap-node-{{ checksum "ui/package.json" }}
    paths:
    - ui/node_modules
    - ui/packages/atlasmap-core/node_modules
    - ui/packages/atlasmap/node_modules
    - ui/packages/atlasmap-standalone/node_modules

save_junit: &save_junit
  run:
    when: always
    name: Collect junit reports
    command: |
      mkdir -p /workspace/junit/
      find . -type f -regextype posix-extended -regex ".*target/.*TESTS?-.*xml" | xargs -i cp --backup --suffix=.xml {} /workspace/junit/

save_checkstyle: &save_checkstyle
  run:
    when: always
    name: Collect checkstyle reports
    command: |
      mkdir -p /workspace/checkstyle/
      find . -type f -regex ".*target/checkstyle-result.xml" -exec bash -c "cp {} /workspace/checkstyle/\`echo {} | sed -e 's#^\./##' | sed -e 's#/#-#g'\`" \;

save_docs: &save_docs
  run:
    when: always
    name: Collect docs
    command: |
      cp -a docs/target/generated-docs /workspace/docs

push_images: &push_images
  deploy:
    name: Push Docker Image
    command: |
      if [ "${CIRCLE_PROJECT_USERNAME}" != "atlasmap" ]; then
        exit 0
      fi
      if [ "${CIRCLE_BRANCH}" != "master" ]; then
        exit 0
      fi

      cd standalone
      ../mvnw --batch-mode -Pdocker \
      -Dimage.tag.primary=latest \
      -Djkube.docker.username=${DOCKER_USERNAME} \
      -Djkube.docker.password=${DOCKER_PASSWORD} \
      k8s:build k8s:push

publish_npm: &publish_npm
  deploy:
    name: Publish NPM Package
    command: |
      if [ "${CIRCLE_PROJECT_USERNAME}" != "atlasmap" ]; then
        exit 0
      fi

      cd ui
      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        NPM_TAG=`npm run version|sed '$!d'`.`date '+%Y%m%d%H%M%S'`
      elif [[ "${CIRCLE_TAG}" =~ ^[0-9]+(\.[0-9]+){2} ]]; then
        NPM_TAG="${CIRCLE_TAG}"
      fi
      if [ -z "${NPM_TAG}" ]; then
        exit 0
      fi
      cd dist/lib
      echo "Publishing @atlasmap/atlasmap-data-mapper ${NPM_TAG}..."
      git config --global user.name "AtlasMap CI"
      git config --global user.email "tm.igarashi+atlasmapci@gmail.com"
      npm version ${NPM_TAG}
      echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      npm publish

publish_docs: &publish_docs
  deploy:
    name: Publish Docs
    command: |
      if [ "${CIRCLE_PROJECT_USERNAME}" != "atlasmap" ]; then
        exit 0
      fi

      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        cd docs
        sh publish-docs.sh
        cd ..
      fi

jobs:
  build:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - <<: *load_cache_mvn
      - <<: *load_cache_node
      - run:
          name: Install dependencies 
          command: |
            apt-get update
            apt-get install -y libxss1 patch libpangocairo-1.0-0 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxi6 libxtst6 libnss3 libcups2 libxrandr2 libasound2 libatk1.0-0 libgtk-3-0 chromium-driver
      - run:
          name: Build AtlasMap
          command: |
            ./mvnw --batch-mode -Pcoverage -Dwebdriver.chrome.driver=/usr/bin/chromedriver clean install | tee -a build_log.txt
      - store_artifacts:
          path: build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: /workspace/junit
      - <<: *save_docs
      - store_artifacts:
          path: /workspace/docs
      - run:
          when: always
          name: Collect Coverage reports
          command: |
            mkdir /workspace/coverage/
            cp -a ./coverage-report/target/site/jacoco-aggregate/* /workspace/coverage
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              java -cp ./.circleci/codacy-coverage-reporter-4.0.3-assembly.jar com.codacy.CodacyCoverageReporter report -l Java -r /workspace/coverage/jacoco.xml
            fi
            mkdir /workspace/coverage/ui
            for dir in `ls --color=never ui/packages`; do
              mkdir /workspace/coverage/ui/${dir}
              cp -a ui/packages/${dir}/coverage/lcov-report/* /workspace/coverage/ui/${dir}/ 2>/dev/null || :
            done
      - store_artifacts:
          path: /workspace/coverage
      - <<: *save_checkstyle
      - store_artifacts:
          path: /workspace/checkstyle
      - <<: *save_cache_mvn
      - <<: *save_cache_node
      - <<: *push_images
      # - <<: *publish_npm

  docs:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - <<: *load_cache_mvn
      - <<: *publish_docs
      - store_artifacts:
          path: docs/gh-pages
      - <<: *save_cache_mvn

workflows:
  version: 2
  AtlasMap:
    jobs:
      - build:
          filters:
            branches:
              ignore: gh-pages
      - docs:
          filters:
            branches:
              only:
                - master
          requires:
            - build
