#
# Copyright (C) 2016 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: 2

common_env: &common_env
  MAVEN_OPTS: -Xmx512m -XX:MaxMetaspaceSize=256m
  CHROME_BIN: /usr/bin/chromium
  DOCKER_VERSION: 17.12.1-ce

job_default: &job_defaults
  working_directory: /workspace
  docker:
    - image: openjdk:8-jdk
  
load_m2: &load_m2
  attach_workspace:
    at: ~/.m2

save_m2: &save_m2
  persist_to_workspace:
    root: ~/.m2
    paths:
      - repository/io/atlasmap

save_junit: &save_junit
  run:
    when: always
    name: Collect junit reports
    command: |
      mkdir -p /workspace/junit/
      find . -type f -regextype posix-extended -regex ".*target/.*TESTS?-.*xml" | xargs -i cp --backup --suffix=.xml {} /workspace/junit/

save_checkstyle: &save_checkstyle
  run:
    when: always
    name: Collect checkstyle reports
    command: |
      mkdir -p /workspace/checkstyle/
      find . -type f -regex "./[runtime|camel].*/target/checkstyle-result.xml" -exec bash -c "cp {} /workspace/checkstyle/\`echo {} | sed -e 's#^\./##' | sed -e 's#/#-#g'\`" \;

push_images: &push_images
  deploy:
    name: Push Docker Image
    command: |
      if [ "${CIRCLE_PROJECT_USERNAME}" != "atlasmap" ]; then
        exit 0
      fi

      cd runtime
      curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz | tar xz -C /usr/bin --strip-components 1

      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        DOCKER_IMAGE_TAG="latest"
      elif [[ "${CIRCLE_TAG}" =~ ^[0-9]+(\.[0-9]+){2} ]]; then
        DOCKER_IMAGE_TAG="${CIRCLE_TAG}"
      fi

      if [ -z "${DOCKER_IMAGE_TAG}" ]; then
        exit 0
      fi

      docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      docker push atlasmap/atlasmap:${DOCKER_IMAGE_TAG} | cat -

publish_npm: &publish_npm
  deploy:
    name: Publish NPM Package
    command: |
      if [ "${CIRCLE_PROJECT_USERNAME}" != "atlasmap" ]; then
        exit 0
      fi

      cd ui
      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        NPM_TAG=`npm run version|sed '$!d'`.`date '+%Y%m%d%H%M%S'`
      elif [[ "${CIRCLE_TAG}" =~ ^[0-9]+(\.[0-9]+){2} ]]; then
        NPM_TAG="${CIRCLE_TAG}"
      fi
      if [ -z "${NPM_TAG}" ]; then
        exit 0
      fi
      cd dist/lib
      echo "Publishing @atlasmap/atlasmap-data-mapper ${NPM_TAG}..."
      git config --global user.name "AtlasMap CI"
      git config --global user.email "tm.igarashi+atlasmapci@gmail.com"
      npm version ${NPM_TAG}
      echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      npm publish

publish_docs: &publish_docs
  deploy:
    name: Publish Docs
    command: |
      if [ "${CIRCLE_PROJECT_USERNAME}" != "atlasmap" ]; then
        exit 0
      fi

      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        cd docs
        sh publish-docs.sh
        cd ..
      fi

jobs:
  runtime:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: atlasmap-mvn-runtime-{{ checksum "runtime/pom.xml" }}
      - <<: *load_m2
      - run:
          name: Build Runtime
          command: |
            ./mvnw -N install
            cd parent
            ../mvnw --batch-mode install | tee ../build_log.txt
            cd ../runtime
            ../mvnw --batch-mode -Pjacoco -Pfabric8 -Dfabric8.mode=kubernetes clean checkstyle:check install | tee -a ../build_log.txt
            cd ..
      - store_artifacts:
          path: build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: /workspace/junit
      - run:
          when: always
          name: Collect Coverage reports
          command: |
            mkdir /workspace/coverage/
            cp -a ./runtime/coverage-report/target/site/jacoco-aggregate/* /workspace/coverage
            java -cp ./.circleci/codacy-coverage-reporter-2.0.1-assembly.jar com.codacy.CodacyCoverageReporter -l Java -r /workspace/coverage/jacoco.xml
      - store_artifacts:
          path: /workspace/coverage
      - <<: *save_checkstyle
      - store_artifacts:
          path: /workspace/checkstyle
      - <<: *save_m2
      - save_cache:
          key: atlasmap-mvn-runtime-{{ checksum "runtime/pom.xml" }}
          paths:
          - ~/.m2
      - <<: *push_images

  camel-atlasmap:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: atlasmap-mvn-camel-{{ checksum "camel/pom.xml" }}
      - <<: *load_m2
      - run:
          name: Build camel-atlasmap
          command: |
            cd camel
            ../mvnw --batch-mode -Pjacoco clean checkstyle:check install | tee ../build_log.txt
            cd ..
      - store_artifacts:
          path: build_log.txt
      - <<: *save_junit
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: /workspace/junit
      - run:
          when: always
          name: Collect Coverage reports
          command: |
            mkdir /workspace/coverage/
            cp -a ./camel/target/site/jacoco/* /workspace/coverage
      - store_artifacts:
          path: /workspace/coverage
      - <<: *save_checkstyle
      - store_artifacts:
          path: /workspace/checkstyle
      - <<: *save_m2
      - save_cache:
          key: atlasmap-mvn-camel-{{ checksum "camel/pom.xml" }}
          paths:
          - ~/.m2
    
  UI:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - <<: *load_m2
      - run:
          name: Install Chromium
          command: |
            apt-get update -qq
            apt-get install -qq -y wget curl
            curl -sL https://deb.nodesource.com/setup_8.x | bash -
            apt-get install -qq -y chromium libgconf2-4 libxss1 libgtk-3-0 nodejs
      - run:
          name: Install yarn
          command: |
            rm -rf ~/.yarn
            curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.3.2
            echo 'export PATH="${HOME}/.yarn/bin:${PATH}"' >> $BASH_ENV
      - restore_cache:
          key: atlasmap-yarn-{{ checksum "ui/yarn.lock" }}
      - run:
          name: yarn install
          command: cd ui; yarn install | tee build_log.txt
      - run:
          name: yarn lint
          command: cd ui; yarn lint | tee -a build_log.txt
      - run:
          name: yarn build
          command: cd ui; yarn build:lib | tee -a build_log.txt
      - run:
          name: yarn inspect
          command: cd ui; yarn inspect | tee -a build_log.txt
      - run:
          name: yarn test
          command: cd ui; yarn test:coverage | tee -a build_log.txt
      - store_artifacts:
          path: build_log.txt
      - run:
          name: Collect unit test report
          when: always
          command: |
            mkdir -p /workspace/junit
            find ui/junit -type f -regex  ".*xml" -exec cp {} /workspace/junit/ \;
      - store_test_results:
          path: /workspace/junit
      - store_artifacts:
          path: /workspace/junit
      - run:
          name: Collect Coverage reports
          when: always
          command: |
            mkdir -p /workspace/coverage/
            cp -a ui/coverage/* /workspace/coverage
      - store_artifacts:
          path: /workspace/coverage
      - save_cache:
          key: atlasmap-yarn-{{ checksum "ui/yarn.lock" }}
          paths:
          - ~//usr/local/share/.cache/yarn/v1
      - <<: *publish_npm

  docs:
    <<: *job_defaults
    environment:
      <<: *common_env
    steps:
      - checkout
      - restore_cache:
          key: atlasmap-mvn-docs-{{ checksum "docs/pom.xml" }}
      - <<: *load_m2
      - <<: *publish_docs
      - store_artifacts:
          path: docs/gh-pages
      - save_cache:
          key: atlasmap-mvn-docs-{{ checksum "docs/pom.xml" }}
          paths:
          - ~/.m2
  
workflows:
  version: 2
  AtlasMap:
    jobs:
      - runtime:
          filters:
            branches:
              ignore: gh-pages
      - camel-atlasmap:
          filters:
            branches:
              ignore: gh-pages
          requires:
            - runtime
      - UI:
          filters:
            branches:
              ignore: gh-pages
          requires:
            - runtime
      - docs:
          filters:
            branches:
              only:
                - master
          requires:
            - runtime
            - camel-atlasmap
            - UI
